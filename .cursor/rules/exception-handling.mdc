---
description:
globs:
alwaysApply: false
---
# 실시간 경매 플랫폼 예외 처리 전략

## 핵심 원칙

1. **도메인 예외의 순수성 유지**
   - 도메인 예외는 비즈니스 규칙 위반을 명확하게 표현
   - 기술적 구현(HTTP 등)에 독립적인 예외 정의

2. **예외 투명성**
   - 애플리케이션 서비스 레이어에서 도메인 예외를 변환하지 않음
   - 도메인 예외를 상위 계층으로 그대로 전파

3. **전역 예외 처리**
   - 컨트롤러 레이어의 전역 핸들러에서 모든 예외 처리
   - 예외 유형별 적절한 HTTP 응답 매핑

## 예외 처리 흐름

```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│  Controller │     │ Application │     │   Domain    │     │    Global   │
│    Layer    │─────►   Service   │─────►   Service   │     │  Exception  │
│             │     │             │     │             │     │   Handler   │
└─────────────┘     └─────────────┘     └─────────────┘     └─────────────┘
                                               │                   ▲
                                               │                   │
                                               ▼                   │
                                        ┌─────────────┐           │
                                        │   Domain    │           │
                                        │  Exception  │───────────┘
                                        │             │
                                        └─────────────┘
```

## 구현 가이드라인

### 도메인 예외 정의

```kotlin
// 도메인 예외는 명확한 의미를 담고 있음
package com.auctionapp.domain.exception

class AlreadySoldProductException : RuntimeException("이미 판매된 상품입니다")
class InvalidAuctionStatusChangeException : RuntimeException("경매 상태를 변경할 수 없습니다")
```

### 애플리케이션 서비스 구현

```kotlin
// 도메인 예외를 그대로 전파
@Transactional
fun registerProduct(userId: Long, name: String, description: String?): Long {
    val user = userRepository.findByIdOrNull(userId) ?: throw NotFoundUserException()
    val product = Product(name, description, user)
    
    // 도메인 예외 발생 시 그대로 상위로 전파
    productService.registerProduct(product, user)
    
    return productRepository.save(product).id!!
}
```

### 전역 예외 핸들러 구현

```kotlin
@RestControllerAdvice
class GlobalExceptionHandler {
    
    @ExceptionHandler(AlreadySoldProductException::class)
    fun handleAlreadySoldProductException(ex: AlreadySoldProductException): ResponseEntity<ErrorResponse> {
        return ResponseEntity
            .status(HttpStatus.BAD_REQUEST)
            .body(ErrorResponse("PRODUCT_ALREADY_SOLD", ex.message))
    }
    
    // 각 도메인 예외 유형별로 적절한 처리 구현
}
```

## 테스트 전략

### 단위 테스트

```kotlin
@Test
@DisplayName("이미 판매된 상품 등록 시 예외가 발생한다")
fun registerAlreadySoldProduct_throwsException() {
    // given
    val productService = mockk<ProductService>()
    every { productService.registerProduct(any(), any()) } throws AlreadySoldProductException()
    
    // when, then
    assertThrows<AlreadySoldProductException> {
        productAppService.registerProduct(1L, "상품명", "설명")
    }
}
```

### 통합 테스트

```kotlin
@Test
@DisplayName("이미 판매된 상품 등록 API 호출 시 400 에러를 반환한다")
fun registerAlreadySoldProductApi_returnsBadRequest() {
    // given, when, then
    mockMvc.perform(post("/api/products")
        .contentType(MediaType.APPLICATION_JSON)
        .content("{\"name\":\"상품명\",\"description\":\"설명\"}"))
        .andExpect(status().isBadRequest())
        .andExpect(jsonPath("$.errorCode").value("PRODUCT_ALREADY_SOLD"))
}
```

## 주의사항

1. **애플리케이션 서비스에서 예외 변환 금지**
   - 도메인 예외의 의미를 희석시키지 않도록 예외 변환 지양

2. **명시적인 예외 처리**
   - 모든 도메인 예외는 GlobalExceptionHandler에서 명시적으로 처리

3. **예외 계층 구조 활용**
   - 관련 있는 예외들은 공통 상위 예외 클래스로 계층화하여 관리
