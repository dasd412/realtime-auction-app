---
description: 
globs: 
alwaysApply: true
---
# 실시간 경매 플랫폼 학습 목표

이 프로젝트는 UI나 사용성보다는 다양한 기술 학습에 중점을 둔 토이 프로젝트입니다. 다음과 같은 핵심 학습 목표를 가지고 있습니다.

## 핵심 학습 목표

### 1. 웹소켓을 통한 실시간 기능 구현
- STOMP 프로토콜을 활용한 웹소켓 구현
- 실시간 입찰 정보 전송
- 경매 상태 변경(시작, 종료) 실시간 알림
- 클라이언트-서버 양방향 통신

### 2. 동시성 제어 및 락 전략
- 낙관적 락(Optimistic Lock)과 비관적 락(Pessimistic Lock) 구현 및 비교
- 버전 필드를 통한 충돌 감지
- A/B 테스트를 통한 성능 및 사용자 경험 비교
- 동시 입찰 상황에서의 데이터 일관성 보장

### 3. Redis와 JWT를 활용한 인증
- Redis를 활용한 JWT 토큰 세션 관리
- 토큰 블랙리스트 관리
- 로그아웃 및 세션 만료 처리
- 분산 환경에서의 인증 관리

### 4. 데이터베이스 심화 학습
- 높은 트래픽에 대응하기 위한 데이터베이스 샤딩/파티셔닝
- 읽기/쓰기 분리 전략
- 인덱스 최적화
- JPA와 JOOQ 혼합 사용 전략

### 5. 도메인 주도 설계(DDD) 적용
- 경매 도메인 모델링 (경매, 입찰, 사용자 등)
- 바운디드 컨텍스트 정의
- 애그리게이트 및 엔티티 설계
- 값 객체(Value Object) 활용
- 도메인 이벤트 기반 아키텍처

### 6. 배치 처리 구현
- 경매 마감 자동화 처리
- 결제 처리 자동화
- 통계 데이터 생성
- 스케줄링 및 비동기 작업 처리

## 실험 및 비교 학습

- 동시성 제어 전략(낙관적 락 vs 비관적 락) A/B 테스트
- 다양한 데이터베이스 접근 방식 비교(JPA vs JOOQ)
- 이벤트 기반 아키텍처와 전통적인 아키텍처 비교

## 기술 스택

- 백엔드: Kotlin, Spring Boot
- 데이터베이스: MySQL, Redis
- 웹소켓: STOMP
- 보안: Spring Security, JWT
- 빌드 도구: Gradle
- 테스트: JUnit 5, MockK
- 인프라: Docker, Docker Compose
