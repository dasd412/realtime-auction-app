---
description: 
globs: 
alwaysApply: true
---
# 실시간 경매 플랫폼 테스트 전략

## 테스트 원칙

- **단위 테스트 우선**: 모든 레이어에서 단위 테스트를 기본으로 작성
- **레이어별 테스트 전략 차별화**: 각 레이어의 특성에 맞는 테스트 방식 적용
- **테스트 가독성 중시**: 테스트 코드는 문서화의 역할도 수행
- **테스트 커버리지 관리**: 핵심 비즈니스 로직은 높은 커버리지 유지

## 테스트 구조

모든 테스트는 다음과 같은 구조를 따릅니다:

```kotlin
@Test
fun `테스트 설명`() {
    // given
    // 테스트 준비 코드

    // when
    // 테스트 대상 실행 코드

    // then
    // 검증 코드
}
```

## 레이어별 테스트 전략

### 도메인 레이어 테스트

- **테스트 대상**: 엔티티, Value Object, 도메인 서비스
- **테스트 방식**: 순수 단위 테스트 (외부 의존성 없음)
- **테스트 도구**: JUnit 5, AssertJ
- **테스트 네이밍**: 끝에 Test 붙이고, @DisplayName()으로 한글화
- **테스트 패턴**: given-when-then

```kotlin
    @Test
    @DisplayName("정상적인 입찰 금액이면 성공한다")
    fun bidTest() {
        // given
        val amount = Money(1000L)
        val user = User.fixture()
        val product = Product.fixture(user = user)
        val auction = Auction.fixture(user = user, product = product)

        // when
        val bid =
            Bid.fixture(
                amount = amount,
                user = user,
                auction = auction,
                createdAt = LocalDateTime.now(),
            )

        // then
        assertThat(bid.amount).isEqualTo(amount)
    }
```

### 리포지토리 레이어 테스트

- **테스트 대상**: 리포지토리 인터페이스 구현체
- **테스트 방식**: 인메모리 데이터베이스(H2) 활용
- **테스트 도구**: JUnit 5, Spring Boot Test
- **테스트 범위**: 커스텀 쿼리 중심으로 테스트 (기본 CRUD는 테스트하지 않습니다.)

### 애플리케이션 서비스 레이어 테스트

- **테스트 대상**: 애플리케이션 서비스
- **테스트 방식**: Mock 객체를 활용한 단위 테스트
- **테스트 도구**: JUnit 5, Mockito, MockK
- **테스트 범위**: 비즈니스 흐름 및 트랜잭션 검증

### 컨트롤러 레이어 테스트

- **테스트 대상**: REST 컨트롤러, 웹소켓 컨트롤러
- **테스트 방식**: MockMvc를 활용한 단위 테스트
- **테스트 도구**: Spring Boot Test, MockMvc
- **테스트 범위**: API 응답 검증, 상태 코드, 응답 본문

## 테스트 데이터 관리

- 공통 테스트 데이터는 픽스처로 관리
- 테스트 데이터 팩토리 패턴 활용
- H2 인메모리 데이터베이스 활용

## 테스트 자동화

- GitHub Actions를 통한 자동 테스트 실행
- JaCoCo를 통한 테스트 커버리지 측정
- 도메인 레이어: 최소 90% 이상 커버리지 목표
