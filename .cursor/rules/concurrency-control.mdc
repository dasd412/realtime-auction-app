---
description: 
globs: 
alwaysApply: false
---
# 실시간 경매 플랫폼 동시성 제어 전략

## 동시성 제어의 필요성

실시간 경매 시스템에서는 동시에 여러 사용자가 동일한 경매에 입찰하는 상황이 빈번하게 발생합니다. 이러한 상황에서 데이터 일관성을 보장하기 위해 적절한 동시성 제어 전략이 필요합니다.

## 주요 동시성 제어 전략

### 낙관적 락(Optimistic Lock)

- **구현 방식**: 엔티티에 버전 필드를 추가하여 충돌 감지
- **적용 대상**: 경매(Auction) 엔티티
- **작동 원리**: 데이터 수정 시 버전 증가, 다른 트랜잭션이 이미 수정한 경우 예외 발생

```kotlin
@Entity
class Auction(
    // ... 다른 필드

    @Version
    var version: Long = 0
)
```

### 비관적 락(Pessimistic Lock)

- **구현 방식**: 데이터베이스 수준의 락을 활용
- **적용 대상**: 인기 있는 경매 항목
- **작동 원리**: 데이터 읽기 시점에 락을 획득하여 다른 트랜잭션의 접근 차단

```kotlin
@Lock(LockModeType.PESSIMISTIC_WRITE)
@Query("SELECT a FROM Auction a WHERE a.id = :auctionId")
fun findByIdWithPessimisticLock(auctionId: Long): Optional<Auction>
```

## 동시성 제어 관련 예외 처리

- **OptimisticLockException**: 낙관적 락 충돌 시 발생
- **예외 처리 전략**: 사용자에게 재시도 요청 또는 자동 재시도 로직 구현

## 성능 고려사항

- 락 범위 최소화
- 트랜잭션 시간 최소화
- 적절한 인덱스 설정
