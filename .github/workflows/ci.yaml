name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      # 테스트용 MySQL 컨테이너
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: auction_test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      # 테스트용 Redis 컨테이너
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Check code style
        run: ./gradlew ktlintCheck

      - name: Run unit tests
        run: ./gradlew test

      - name: Code coverage analysis
        run: ./gradlew jacocoTestReport

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()  # 테스트가 실패해도 결과를 보여줌
        with:
          name: 'Test Results'
          path: 'build/test-results/test/*.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./build/reports/jacoco/test/jacocoTestReport.xml

      - name: Save test and code quality reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            build/reports/tests
            build/reports/jacoco
            build/reports/ktlint

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Newman
        run: npm install -g newman newman-reporter-htmlextra

      - name: Build application
        run: ./gradlew build -x test

      - name: Start application
        run: |
          # plain이 아닌 실행 가능한 JAR 파일 찾기
          EXEC_JAR=$(find build/libs/ -name "*.jar" -not -name "*plain.jar" | head -n 1)
          echo "Found executable JAR: $EXEC_JAR"

          nohup java -jar $EXEC_JAR --server.port=8080 > app.log 2>&1 &
          APP_PID=$!
          echo "Waiting for application to start..."
          sleep 60

          # 서버 상태 확인
          if ps -p $APP_PID > /dev/null; then
            echo "Application started with PID $APP_PID"
            curl -v http://localhost:8080/actuator/health || echo "Health check failed but continuing"
            cat app.log | tail -n 50
          else
            echo "Application failed to start"
            cat app.log
            exit 1
          fi
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/auction_test_db
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root
          SPRING_DATA_REDIS_HOST: localhost
          SPRING_DATA_REDIS_PORT: 6379
          REDISSON_ADDRESS: redis://localhost:6379
          SERVER_PORT: 8080
          SERVER_SERVLET_CONTEXT_PATH: /api

      - name: Check Postman Files
        run: |
          echo "Listing postman directory:"
          ls -la ./postman/
          echo "Content of environment file:"
          cat ./postman/auction-environment.postman_environment.json

      - name: Run API Tests with Newman
        run: |
          newman run ./postman/auction.postman_collection.json \
          --environment ./postman/auction-environment.postman_environment.json \
          --reporters cli,htmlextra \
          --reporter-htmlextra-export build/reports/newman/report.html
        env:
          BASE_URL: http://localhost:8080/api

      - name: Save Newman Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-report
          path: build/reports/newman
